package algoritmos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class DFS {
	static final int MAX = 400;
	static int ady[][] = new int[MAX][MAX]; // matriz de adyacencia
	static Scanner sc = new Scanner(System.in);
	static int V, prev[] = new int[MAX];

	public static void dfs() {
		int ini, fin, pasos = 0, max = 0, actual;
		boolean visitado[] = new boolean[MAX];
		Arrays.fill(visitado, false);
		System.out.println("Nodo raiz: ");
		ini = sc.nextInt();
		System.out.println("Nodo final: ");
		fin = sc.nextInt();
		prev[ini] = -1;
		visitado[ini] = true;
		Stack<Integer> S = new Stack<Integer>();
		S.add(ini);
		while (!S.isEmpty()) {
			max = Math.max(max, S.size()); // ver memoria usada en cola
			actual = S.pop();
			pasos++; // numero de vertices que estoy visitando
			if (actual == fin)
				break; // si se llego al destino
			for (int i = 1; i <= V; ++i) { // vemos adyacentes a nodo actual
				int v = ady[actual][i];
				if (v != 0 && !visitado[i]) { // no visitado agregamos a cola
					System.out.println(actual + " -> " + i); // vemos recorrido
																// de todo BFS
					prev[i] = actual; // para ver recorrido mas corto de nodo
										// inicio a fin
					visitado[i] = true;
					S.add(i);
				}
			}
		}
		System.out.println("Memoria maxima: " + max);
		System.out.println("Nro Pasos: " + pasos);
		PrintRecorrido(ini, fin);
	}

	// Imprimimos recorrido para llegar de nodo ini a fin
	static void PrintRecorrido(int ini, int fin) {

		System.out.println("Recorrido de nodos para llegar de nodo " + ini + " a " + fin);
		List<Integer> path = new ArrayList<Integer>();

		for (;;) {
			path.add(fin);
			if (prev[fin] == -1)
				break;
			fin = prev[fin];
		}

		for (int i = path.size() - 1, k = 0; i >= 0; --i) {
			if (k != 0)
				System.out.print("->");
			System.out.print(path.get(i));
			k = 1;
		}
		System.out.println();
	}

	public static void main(String args[]) {
		int E, u, v;
		V = sc.nextInt(); // Numero de vertices
		E = sc.nextInt(); // Numero de aristas

		for (int i = 0; i < E; ++i) {
			u = sc.nextInt();
			v = sc.nextInt(); // enlace origen - destino
			ady[u][v] = 1;
		}
		dfs();
	}
}
