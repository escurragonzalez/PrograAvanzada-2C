package algoritmos;

/*
EJEMPLO DE INPUT
5 9
1 2 7
1 4 2
2 3 1
2 4 2
3 5 4
4 2 3
4 3 8
4 5 5
5 3 5
1
*/
import java.util.*;

public class Dijkstra {

	static final int MAX = 10005; // maximo numero de vértices
	static final int INF = 1 << 30; // definimos un valor grande que represente
									// la distancia infinita inicial, basta
									// conque sea superior al maximo valor del
									// peso en alguna de las aristas

	static class Node implements Comparable<Node> {
		int first, second;

		Node(int d, int p) { // constructor
			this.first = d;
			this.second = p;
		}

		public int compareTo(Node other) {
			if (second > other.second)
				return 1;
			if (second == other.second)
				return 0;
			return -1;
		}
	};

	static Scanner sc = new Scanner(System.in);
	
	static List<List<Node>> ady = new ArrayList<List<Node>>(); // lista de
																// adyacencia
	static int distancia[] = new int[MAX]; // distancia[ u ] distancia de
											// vértice origen a vértice con ID = u
	static boolean visitado[] = new boolean[MAX];
	
	static PriorityQueue<Node> Q = new PriorityQueue<Node>(); 
	
	static int V; // numero de vertices
	
	/**  AGREGADO **/
	static int previo[] = new int[MAX]; // para la impresion de caminos

	// función de inicialización
	static void init() {
		for (int i = 0; i <= V; ++i) {
			distancia[i] = INF;
			visitado[i] = false;
			/** AGREGADO **/
			previo[i] = -1; // inicializamos el previo del vertice i con -1
		}
	}

	/** AGREGADO **/
	// Impresion del camino mas corto desde el vertice inicial y final
	// ingresados
	static void print(int destino) {
		if (previo[destino] != -1) // si aun poseo un vertice previo
			print(previo[destino]); // recursivamente sigo explorando
		System.out.printf("%d ", destino); // terminada la recursion imprimo los
											// vertices recorridos
	}

	static void dijkstra(int origen) {
		init(); // inicializamos nuestros arreglos
		Q.add(new Node(origen, 0)); 
		distancia[origen] = 0;
		
		int actual, adyacente, peso;
		
		while (!Q.isEmpty()) {
			actual = Q.element().first; 
			Q.remove();
			
			if (visitado[actual])
				continue; // Si el vértice actual ya fue visitado entonces sigo
							// sacando elementos de la cola
			visitado[actual] = true;

			for (int i = 0; i < ady.get(actual).size(); ++i) { // reviso sus
																// adyacentes
																// del vertice
																// actual
				adyacente = ady.get(actual).get(i).first;
				peso = ady.get(actual).get(i).second;
				
				if (!visitado[adyacente]) {
					// Si la distancia del origen al vertice actual + peso de su arista es
					// menor a la distancia del origen al vertice adyacente
					if (distancia[actual] + peso < distancia[adyacente]) {
						distancia[adyacente] = distancia[actual] + peso; // relajamos el
																			// vertice
																			// actualizando
																			// la distancia
						Q.add(new Node(adyacente, distancia[adyacente]));
						/** AGREGADO **/
						previo[adyacente] = actual;
					}
				}
			}
		}

		System.out.printf("Distancias mas cortas iniciando en vertice %d\n", origen);
		for (int i = 1; i <= V; ++i) {
			System.out.printf("Vertice %d , distancia mas corta = %d\n", i, distancia[i]);
		}

		/** AGREGADO **/
		System.out.println("\n**************Impresion de camino mas corto**************");
		System.out.printf("Ingrese vertice destino: ");
		int destino;
		destino = sc.nextInt();
		print(destino);
		System.out.printf("\n");
	}

	public static void main(String[] args) {
		int E, origen, destino, peso, inicial;

		V = sc.nextInt();
		E = sc.nextInt();
		for (int i = 0; i <= V; ++i)
			ady.add(new ArrayList<Node>()); // inicializamos lista de adyacencia
		
		for (int i = 0; i < E; ++i) {
			origen = sc.nextInt();
			destino = sc.nextInt();
			peso = sc.nextInt();
			ady.get(origen).add(new Node(destino, peso)); // grafo diridigo
			// ady.get( destino ).add( new Node( destino , peso ) ); //no
			// dirigido
		}
		System.out.print("Ingrese el vertice inicial: ");
		inicial = sc.nextInt();
		dijkstra(inicial);
	}
}
